// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Error The default error returned
type Error struct {
	// Details The details about the error.
	Details string `json:"details"`

	// Status The HTTP status code returned.
	Status int `json:"status"`

	// Title Error title.
	Title string `json:"title"`
}

// Location The rental location.
type Location struct {
	// City The rental city.
	City string `json:"city"`

	// Country The rental country.
	Country string `json:"country"`

	// Lat The rental latitude.
	Lat float32 `json:"lat"`

	// Lng The rental longitude.
	Lng float32 `json:"lng"`

	// State The rental state.
	State string `json:"state"`

	// Zip The rental zip.
	Zip string `json:"zip"`
}

// Price The rental price.
type Price struct {
	// Day The rental price per day.
	Day int `json:"day"`
}

// Rental A rental object.
type Rental struct {
	// Description The rental description.
	Description string `json:"description"`

	// Id The rental id.
	Id int `json:"id"`

	// Length The rental length.
	Length float32 `json:"length"`

	// Location The rental location.
	Location Location `json:"location"`

	// Make The rental make.
	Make string `json:"make"`

	// Model The rental model.
	Model string `json:"model"`

	// Name The rental name.
	Name string `json:"name"`

	// Price The rental price.
	Price Price `json:"price"`

	// PrimaryImageUrl The rental primary image url.
	PrimaryImageUrl string `json:"primary_image_url"`

	// Sleeps The rental sleeps.
	Sleeps int `json:"sleeps"`

	// Type The rental type.
	Type string `json:"type"`

	// User The rental user.
	User User `json:"user"`

	// Year The rental year.
	Year int `json:"year"`
}

// User The rental user.
type User struct {
	// FirstName The rental user first name.
	FirstName string `json:"first_name"`

	// Id The rental
	Id int `json:"id"`

	// LastName The rental user last name.
	LastName string `json:"last_name"`
}

// GetV1RentalsParams defines parameters for GetV1Rentals.
type GetV1RentalsParams struct {
	// PriceMin The minimum price of the rental.
	PriceMin *float32 `form:"price_min,omitempty" json:"price_min,omitempty"`

	// PriceMax The maximum price of the rental.
	PriceMax *float32 `form:"price_max,omitempty" json:"price_max,omitempty"`

	// Limit The maximum number of rentals to return.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The offset of the rentals to return.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Ids The comma separated list of rental ids to return.
	Ids *string `form:"ids,omitempty" json:"ids,omitempty"`

	// Near The comma separated pair [lat,lng] to return rentals near.
	Near *string `form:"near,omitempty" json:"near,omitempty"`

	// Sort The sort order of the rentals to return.
	Sort *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xYQW/jNhP9KwS/76iVpdjZIL6l7W6bokUDb7KXIAgYaSxzK5FacrSJN/B/L0hKsmTT",
	"ktKiQE8xzOGbx5nHx3FeaSKLUgoQqOnylepkAwWzHz8oJZX5kIJOFC+RS0GX9HYDJIU1q3IkYEKIAqyU",
	"gJQGtFSyBIUctNuIjOf6FIZdJOxJVkhwAw4tpAGFF1aUOdhAromCrxVoJM9Mkydm0uC2NKsaFRcZ3QVU",
	"I8PqRKJfbm9viAsgiUyh5dtLtYiiFpcLhAyUAUaOZvUQ19aG2MU+4R9YSlaO7zHPXUDNWbiClC7vG9JN",
	"kqCt10O7Uz59gQQNkd9kwlxy3xkVCGQ5yeug8KgVCcft4FYT0D/KJybIR8VEwnUifUVPZCVQjcC6mD7y",
	"3acrH17OcPh0DDlWab/i84vw4mJx2cKJqnhyrctFNlIskR3jxWdn4SK+XHgATb9gENJG9M/6o/eo33k5",
	"CPSdlz2Yy0Uczcf0ZHvc0HQ59k1y5XVV8enrRvFk+HCliThWVsq249tICYqkrK+D2HflDs5k0H10Vxb8",
	"OPFVk9aFeuh2wwdodxY8lsQ1KbZk9dnXW54OAvO+78Q+18lBZLgZVq8N6UGdReG57x50nOP/CtZ0Sf83",
	"27v+rLb8Weswu4AW7M9hMZiAfl0+SuW15kKmkA9jmYgDsHfxeeRDE6wYJmYC+li/n2pU2Uh+qCruXrjo",
	"gqntIy9YBo+VysdUb6KJjSaVOjjfBrHUy9ns+fk5lBWmUiq9DRNZzOqN7+xG71OXA5R62IZsSP958z5u",
	"9psBIBNwYGc505p4Pa3SoMaqeadd5i0wNZjZBByIO74cdQtuFGglEvSg6421rhtN1jTa69bW1tfsRi6d",
	"+1Qf2WdPd3UtTp7P7Dw2pzVXGh9HNW42ExvrkfuvciPebkvjlsQmMzOhHmI/SRgdiWwDO1Xo5j2us9nN",
	"xVoeU/qjuVPk6uaarKUiBRMs4yKrme7HroNgGtBvoLSDicMojMzpZQmClZwu6TyMwtg0juHG9mz2LZ41",
	"mMtXmoFniFnZiVMTRnKukch1w8JUyAjACuo6pUv6M+DneNVyLJliBSAoTZf3vsIXXPCiKupnVq7tJO3Q",
	"DTg3cV8rsBOAa58T8mPBjUzcxTSM97NG1HmXm2dkF3iTs5e/mZy9+JNfnL89u4vqVJWgrIf8UyxyXnD0",
	"M5hPzC7Xaw3YP/SEzG6bP/X7iakTWRSMaDDiQEgPREV4OoEHT7WfBJ0Hi+Dcd1OnUCkZV+Q+ZxjkInvY",
	"02gLJGpj93ESzo69pObh+0XwLo4vwsv5VHJaKiRSpU4cb2qT2XqCSvMOHFJ4MFamSym0M/OzKLK/vKRA",
	"ENYUWFnm3D0esy/aTWT7DByh0GMPaD33to83ZUqxrbPCQ8/pzMFmw/kb+QzRcP8b8GS9FghKsJx8cD/m",
	"TQSyzLgXbVztwXzZsc3Zq/vwyNPdBAutVf60rUfp0/7p/lynU3y0N51bRRiH3wuipUi7LxaqCrwq8byh",
	"/1ggU3QxQQeLaPHv62AFWlYqASIkkrWsRBr+1zS4//a1aXKzunvY/RUAAP//h2ovxRkTAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
