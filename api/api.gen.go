// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Error The default error returned
type Error struct {
	// Details The details about the error.
	Details string `json:"details"`

	// Status The HTTP status code returned.
	Status int `json:"status"`

	// Title Error title.
	Title string `json:"title"`
}

// Location The rental location.
type Location struct {
	// City The rental city.
	City string `json:"city"`

	// Country The rental country.
	Country string `json:"country"`

	// Lat The rental latitude.
	Lat float64 `json:"lat"`

	// Lng The rental longitude.
	Lng float64 `json:"lng"`

	// State The rental state.
	State string `json:"state"`

	// Zip The rental zip.
	Zip string `json:"zip"`
}

// Price The rental price.
type Price struct {
	// Day The rental price per day.
	Day int64 `json:"day"`
}

// Rental A rental object.
type Rental struct {
	// Description The rental description.
	Description string `json:"description"`

	// Id The rental id.
	Id int `json:"id"`

	// Length The rental length.
	Length float32 `json:"length"`

	// Location The rental location.
	Location Location `json:"location"`

	// Make The rental make.
	Make string `json:"make"`

	// Model The rental model.
	Model string `json:"model"`

	// Name The rental name.
	Name string `json:"name"`

	// Price The rental price.
	Price Price `json:"price"`

	// PrimaryImageUrl The rental primary image url.
	PrimaryImageUrl string `json:"primary_image_url"`

	// Sleeps The rental sleeps.
	Sleeps int `json:"sleeps"`

	// Type The rental type.
	Type string `json:"type"`

	// User The rental user.
	User User `json:"user"`

	// Year The rental year.
	Year int `json:"year"`
}

// User The rental user.
type User struct {
	// FirstName The rental user first name.
	FirstName string `json:"first_name"`

	// Id The rental
	Id int `json:"id"`

	// LastName The rental user last name.
	LastName string `json:"last_name"`
}

// GetV1RentalsParams defines parameters for GetV1Rentals.
type GetV1RentalsParams struct {
	// PriceMin The minimum price of the rental.
	PriceMin *int64 `form:"price_min,omitempty" json:"price_min,omitempty"`

	// PriceMax The maximum price of the rental.
	PriceMax *int64 `form:"price_max,omitempty" json:"price_max,omitempty"`

	// Limit The maximum number of rentals to return.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The offset of the rentals to return.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Ids The comma separated list of rental ids to return.
	Ids *[]int `json:"ids,omitempty"`

	// Near The comma separated pair [lat,lng] to return rentals near.
	Near *[]float64 `form:"near,omitempty" json:"near,omitempty"`

	// Sort The sort order of the rentals to return.
	Sort *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xYTW/jNhD9KwTbo1aWYidBfEvb3TZFiwbeZC9BENDSyOZWIrXkaBNv4P9ekJRky6Jl",
	"pR9ATzGk+Xgz8/iGyitNZFFKAQI1nb9SnayhYPbne6WkMj9S0IniJXIp6JzerYGkkLEqRwLGhCjASglI",
	"aUBLJUtQyEE7R2Q818di2JeELWWFBNfgooU0oPDCijIHa8g1UfClAo3kmWmyZCYNbkrzVqPiYkW3AdXI",
	"sDqS6Je7u1viDEgiU2jxdlLNoqiNywXCCpQJjBzN28O4tjfEvuwC/oGlZOHw9nFuA2pq4QpSOn9oQDdJ",
	"grZfj62nXH6GBA2Q32TCXHJfjQoEspzktVHYG0XCcTPoagy6pXxkgnxQTCRcJ9LX9ERWAtWJsM6mG/n+",
	"47UvXs5wuDqGHKu02/HpZXh5ObsKaCZVYQLQVFZL2846gaiKpRtmLlYn2idW/Qzx2Vk4i69mo1KYmcJg",
	"EmvR7ceP3nZ84+VgoG+87IS5msXR9BTnLA8amC7HbpBuBK5PPg7eKp4MF1caiz77UrY57UZKUCRlXa7E",
	"5li2fecCL2a0f04PijTpfPgXNlsfyXWDw5l68O+bD9Sx98KjY1yTYkMWn3zD5ulgYN4Vq9gnVTmIFa6H",
	"CW5NOqHOovDcd1T25OZ7BRmd0+8mu1UxqffEpJWlbUAL9ucwO4xBty8fpPLqeSFTyIdjGYuDYO/i88gX",
	"TbBiGJgx6Mb6/digyuYMDHXFHRRnXTC1eeIFW8FTpfJTx8BYE2tNKnVQ3xqx1PPJ5Pn5OZQVplIqvQkT",
	"WUxqx3fW0bsfc4BSD+uSNenuRO9GtE8GAhmDA33LmdbEK3KVBnWqm/faZd4AU4OZjcEBueOrk2rBDQMt",
	"RYJO6Nqx5nXDyRpGe9za3vqG3dBl7zzVJfvk6b7uxdH6jGdfnDKuND6d5LhxJtbWQ/df5Vq8XZZOSxIb",
	"jcyYeoD9JOHkPcoOcK8L+3n7fTbeXGSyD+mP5kyR69sbkklFCibYiotVjXR3VzswpgH9Ckq7MHEYhZGp",
	"XpYgWMnpnE7DKIzN4Biu7cwmX+NJE3P+Slfgufks7DVVE0ZyrpHIrEFhOmQIYAl1k9I5/RnwU7xoMZZM",
	"sQIQlKbzB1/jCy54URX13pWZvX676CY4N3ZfKrBXAjc+R+SnghuauINpEO8uH9HIRe2Fw17+Jhz24odz",
	"ef5v4HHrcK/zBGX99XAMV84Ljn5M07HpZZZpwG4fRqR2bv7cF2NzJ7IoGNFgKISQHlCP8PQACLyUuUyB",
	"zjOWa/AD46nuoOIIhe7Ao9NgFpzT4+uGMqXYxl2wN9ZDc+s6roqScUUecoZBLlaPuwra5op6c/jgC6f3",
	"w/in4cUseBfHl+HVlI76UugW5q9DS4VEqtSR8E1sMK5+LrQ76VBVH42s6lIK7RbLWRTZT0cpEIQVKFaW",
	"OXeLbPJZu9uhpy9Dy7y+g/cbsA16+rd3JzcO52/EMwTD/XPDk/VGICjBcvLe/TfCWCBbGSWljcI+mod7",
	"Ej55dT+eeLodIef1WVpu6mv9cS13f27SMZre+VKwjDDbZkeIFiLd356oKvCyxLPP/zFBxvBiBA9m0ey/",
	"58ECtKxUAkRIJJmsRBr+3zi4e/raDLl5u33c/hUAAP//R329PNoTAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
