// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Error The default error returned
type Error struct {
	// Details The details about the error.
	Details *string `json:"details,omitempty"`

	// FailedConstraints ....
	FailedConstraints []FailedConstraint `json:"failed_constraints"`

	// Status The HTTP status code returned.
	Status int `json:"status"`

	// Title Error title.
	Title string `json:"title"`
}

// FailedConstraint Describes the constraint on a field that was wrongly formatted.
type FailedConstraint struct {
	// Message The error message for the failed constraint.
	Message string `json:"message"`

	// Reference The field reference for the failed constraint, using JsonPath notation.
	Reference string `json:"reference"`
}

// Location The rental location.
type Location struct {
	// City The rental city.
	City string `json:"city"`

	// Country The rental country.
	Country string `json:"country"`

	// Lat The rental latitude.
	Lat float32 `json:"lat"`

	// Lng The rental longitude.
	Lng float32 `json:"lng"`

	// State The rental state.
	State string `json:"state"`

	// Zip The rental zip.
	Zip string `json:"zip"`
}

// Price The rental price.
type Price struct {
	// Day The rental price per day.
	Day int `json:"day"`
}

// Rental A rental object.
type Rental struct {
	// Description The rental description.
	Description string `json:"description"`

	// Id The rental id.
	Id int `json:"id"`

	// Length The rental length.
	Length float32 `json:"length"`

	// Location The rental location.
	Location Location `json:"location"`

	// Make The rental make.
	Make string `json:"make"`

	// Model The rental model.
	Model string `json:"model"`

	// Name The rental name.
	Name string `json:"name"`

	// Price The rental price.
	Price Price `json:"price"`

	// PrimaryImageUrl The rental primary image url.
	PrimaryImageUrl string `json:"primary_image_url"`

	// Sleeps The rental sleeps.
	Sleeps int `json:"sleeps"`

	// Type The rental type.
	Type string `json:"type"`

	// User The rental user.
	User User `json:"user"`

	// Year The rental year.
	Year int `json:"year"`
}

// User The rental user.
type User struct {
	// FirstName The rental user first name.
	FirstName string `json:"first_name"`

	// Id The rental
	Id int `json:"id"`

	// LastName The rental user last name.
	LastName string `json:"last_name"`
}

// GetV1RentalsParams defines parameters for GetV1Rentals.
type GetV1RentalsParams struct {
	// PriceMin The minimum price of the rental.
	PriceMin *float32 `form:"price_min,omitempty" json:"price_min,omitempty"`

	// PriceMax The maximum price of the rental.
	PriceMax *float32 `form:"price_max,omitempty" json:"price_max,omitempty"`

	// Limit The maximum number of rentals to return.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The offset of the rentals to return.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Ids The comma separated list of rental ids to return.
	Ids *string `form:"ids,omitempty" json:"ids,omitempty"`

	// Near The comma separated pair [lat,lng] to return rentals near.
	Near *string `form:"near,omitempty" json:"near,omitempty"`

	// Sort The sort order of the rentals to return.
	Sort *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xY32/bNhD+Vwhuj6osxU6D+K3rjy3FhgXpj5ciMM7SSWYnkSpJNXED/+8DSUmWbFpW",
	"NgzYUxzx+N13dx+PJz3RRJSV4Mi1ossnqpINlmB/vpVSSPMjRZVIVmkmOF3SjxskKWZQF5qgMSESdS05",
	"pjSglRQVSs1QuY0aWKFOYdhFAmtRa6I36NBCGlB8hLIq0BoyRSR+q1Fp8gCKrMG40dvKrCotGc/pLqAZ",
	"sALTVSK40hJYE8zQaRiGBpxpLO3qzxIzuqQ/zfYZmDXhz95ZvNcdnPHROAUpYWv+Vxp0fSK43z5+vCXO",
	"gCQixS5Hg/AWUdTBMq4xR2kdMW1WD3FtPYhdHCbpF0jJncvRcW52ATX5YxJTuvzSkm6deDN334GI9VdM",
	"bPBHCTmi98b+t0Zla7nHI4ITIBnDIiV6A66MD1LwvNiSTMgStHZ5GYqnRKUgR39+nfAaE4NinbpYer49",
	"YnJEDIfON2E8EVJiooutT1wSM5TIkxNcHGJndJpNQGrFeE7eK8FvQW8IFxoM0JCmS3poYc/Ws81Sn6Wv",
	"fr+LBBxnXwgSuYaCFI3RcTESprejW43BMIwPwMk7CTxhKhG+tCai5lqegXU2Q+RPH1758ArQ49GBZrpO",
	"h4dnfhVeXS2uOzhel2t3Cguen0kWz4/x4ouLcBFfLzyA5ujhKKS1GMb62hvqD1aNAv1g1QDmehFH83NS",
	"sjVuaTof+yK59Lqs+PR1K1kyHlxlLI6VlcL2/DZSoSQpDHUQ+7rnQUwG3Uf3zoIfO37Vum0OoedK65mP",
	"0O4teJoQU6TckrvPvtqydBSYDa+Q2HeBFMhzvRlXrzUZQF1E4aXvHPQ6x9iV2XWYXUBL+GtcDMZgmJd3",
	"Qnpv9lKkWIxjGYsDsBfxZeRD41COEzMGQ6w/ThWqaiU/lhV3Lpx1CXK7YiXkuKplcU71xppYa1LLg/g2",
	"WldqOZs9PDyEotapEFJtw0SUs2bjC7vRx1oViJUab0PWZDipeOcU+2QEyBgctLMClCLenlYrlOey+Uk5",
	"z1sEOerZGByIO74+2y2YUaCVSDCAbjY2um412dDojluXW1+xW7n0zlMTsq89fWpycTI+s/O4OWVMKr06",
	"q3GzmVhbj9zfiw1/fls635JgMjNj6iH2RuDZacgWsJeFvt/jPJvdjGfimNKf7Zkir25v7EBXAofcDG+O",
	"6X6CPjCmAf2OUjmYOIzCyEQvKuRQMbqk8zAKY1M40Btbs9n3eNZiLp9ojp4h5s6+PCgCpGBKE5G1LEyG",
	"jACsoG5SuqS/ov4c33UcK5BQokap6PKLL/El46ysy+aaFZmdXB26fVkydt9qtBOAK58T8qpkRibuYBrG",
	"+1kj6t3L7TWyC7zO4fEfOodHv/Ory+d7d1a9rBItmve1UywKVjLtZzCf6F1kmUI9DHqCZ7fN7/rlRNeJ",
	"KEsgCo04zOvPUFSEpRN4sFT5SdB5sAgufSd1CpUKmCRfCtBBwfP7PY0uQbxp7D5O3LVjL6l5+HIRvIjj",
	"q/B6PpWcElITIVMnjmeVyWw9QaW9Bw4p3JtWpirBlWvmF1Fk37wE1+jet6GqCuYuj9lX5SayvYdJ3zWa",
	"uffoa4ZphYc9pzcHmw2Xz+QzRsN9WvJ4veEaJYeCvHXfgoyFhtx0L9p2tXvzsNc2Z0/ux4qluwkttFH5",
	"etuM0qf7p/tzk07po4Pp3CrCdPi9IDqKtH9jaVmjVyWeO/RfC2SKLiboYBEt/nsd3KEStUyQcKFJJmqe",
	"hv83De6fPrVFbld397u/AwAA//9CI4utWBUAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
