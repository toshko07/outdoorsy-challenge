// Code generated by MockGen. DO NOT EDIT.
// Source: rentals.go
//
// Generated by this command:
//
//	mockgen -source=rentals.go -destination=mock_rentals.go -package=repositories
//

// Package repositories is a generated GoMock package.
package repositories

import (
	context "context"
	reflect "reflect"

	models "github.com/toshko07/outdoorsy-challenge/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockRentals is a mock of Rentals interface.
type MockRentals struct {
	ctrl     *gomock.Controller
	recorder *MockRentalsMockRecorder
}

// MockRentalsMockRecorder is the mock recorder for MockRentals.
type MockRentalsMockRecorder struct {
	mock *MockRentals
}

// NewMockRentals creates a new mock instance.
func NewMockRentals(ctrl *gomock.Controller) *MockRentals {
	mock := &MockRentals{ctrl: ctrl}
	mock.recorder = &MockRentalsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRentals) EXPECT() *MockRentalsMockRecorder {
	return m.recorder
}

// GetRental mocks base method.
func (m *MockRentals) GetRental(ctx context.Context, id int) (*models.Rental, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRental", ctx, id)
	ret0, _ := ret[0].(*models.Rental)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRental indicates an expected call of GetRental.
func (mr *MockRentalsMockRecorder) GetRental(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRental", reflect.TypeOf((*MockRentals)(nil).GetRental), ctx, id)
}
